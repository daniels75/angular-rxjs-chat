import { Injectable } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { User } from '../user/user.model';
import { Thread } from '../thread/thread.model';
import { Message } from '../message/message.model';

import {publish} from "rxjs/operators";

const initialMessages: Message[] = [];

interface IMessagesOperation extends Function {
  (messages: Message[]): Message[];
}

@Injectable()
export class MessagesService {
  // a stream that publishes new messages only once
  newMessages: Subject<Message> = new Subject<Message>();

  // `messages` is a stream that emits an array of the most up to date messages
  messages: Observable<Message[]>;

  // `updates` receives _operations_ to be applied to our `messages`
  // it's a way we can perform changes on *all* messages (that are currently
  // stored in `messages`)
  updates: Subject<any> = new Subject<any>();

  // action streams
  create: Subject<Message> = new Subject<Message>();
  markThreadAsRead: Subject<any> = new Subject<any>();

  constructor() {
    let arrmsg: Message[] = [];
    let msg: Message = new Message();
    let obs1: String[] = [];
    let obs2: String[] = [];
    let num:number;
/*    this.messages = this.updates.scan((messages1: Message[], obs1, num )=> {
        return messages1;
      });*/
    this.messages = this.updates
      // watch the updates and accumulate operations on the messages
      .scan((messages: Message[],
             operation: IMessagesOperation) => {
               return operation(messages);
             },
            initialMessages)
      // make sure we can share the most recent list of messages across anyone
      // who's interested in subscribing and cache the last known list of
      // messages
      .publishReplay(1)
      .refCount();

    this.messages.publish();

    // `create` takes a Message and then puts an operation (the inner function)
    // on the `updates` stream to add the Message to the list of messages.
    //
    // That is, for each item that gets added to `create` (by using `next`)
    // this stream emits a concat operation function.
    //
    // Next we subscribe `this.updates` to listen to this stream, which means
    // that it will receive each operation that is created
    //
    // Note that it would be perfectly acceptable to simply modify the
    // "addMessage" function below to simply add the inner operation function to
    // the update stream directly and get rid of this extra action stream
    // entirely. The pros are that it is potentially clearer. The cons are that
    // the stream is no longer composable.
    this.create
      .map( function(message: Message): IMessagesOperation {
        return (messages: Message[]) => {
          return messages.concat(message);
        };
      })
      // 2nd update subscribes then aggragate use a function from create
      .subscribe(this.updates);

    // 1st subscribe
    this.newMessages
      .subscribe(this.create);

    this.create.subscribe( {
      next: value => console.log(`value from create: ${value}`)
    });

    // similarly, `markThreadAsRead` takes a Thread and then puts an operation
    // on the `updates` stream to mark the Messages as read
    this.markThreadAsRead
      .map( (thread: Thread) => {
        return (messages: Message[]) => {
          return messages.map( (message: Message) => {
            // note that we're manipulating `message` directly here. Mutability
            // can be confusing and there are lots of reasons why you might want
            // to, say, copy the Message object or some other 'immutable' here
            if (message.thread.id === thread.id) {
              message.isRead = true;
            }
            return message;
          });
        };
      })
      .subscribe(this.updates);

  }

  // an imperative function call to this action stream
  addMessage(message: Message): void {
    this.newMessages.next(message);
  }

  messagesForThreadUser(thread: Thread, user: User): Observable<Message> {
    // here we will subscribe 3 filters (observers) to newMessages
    return this.newMessages
      .filter((message: Message) => {
               // belongs to this thread

        // this is to filter out messages generated by the same user/thread
        // to avoid a recursive calls
        // please see messagesService.messagesForThreadUser(tRev, rev) in the chat-example-data.ts file.
        let filtered: boolean = (message.thread.id === thread.id) &&
          // and isn't authored by this user
          (message.author.id !== user.id);
        console.log(`${filtered} msg: ${message.text} Thread -> message.thread.id: ${message.thread.id} thread.id: ${thread.id} | From: ${message.author.name} - ${message.author.id.slice(0,7)} To: ${user.name} ${user.id.slice(0,7)}`);
        return filtered;
      });
  }
}

export const messagesServiceInjectables: Array<any> = [
  MessagesService
];
